LANGUAGE Grammars

CONSTRUCTS

Language = 'LANGUAGE' Name: Identifier
           'CONSTRUCTS' Constructs: (LIST OF Construct)
           ['CATEGORIES' Categories: (LIST OF Category)]
           ['LEXEMS' Lexems: (LIST OF Lexem)]
           ['SYMBOLS' Symbols: (LIST OF Lexem)]
           ['SEMANTICS' Semantics: (LIST OF Translation)]
           'END'.

Construct = Name: Identifier '=' Grammar: NonTerminalList.
Category = Name: Identifier '=' Grammar: ChoiceList.
Lexem = Name: Identifier '=' Grammar: NonTerminalList.
Translation = Name: Identifier '=' Meaning: Sentence.

Leaf= Body: Terminal.
Attribute = Property: Identifier ':' Grammar: Tree.
Option = '[' Body: NonTerminalList ']'.
Choice = Body: LIST OF (Tree | ContextList) SEPARATED BY '|'.
List = 'LIST' 'OF' Item: Tree ['SEPARATED' 'BY' ListSeparator: Terminal].
ContextList = [Left: TerminalList] Body: NonTerminal [Right: TerminalList].

CATEGORIES

Start= Language.
SeparatorChars= {\0-\32}.
Tree = Leaf | NonTerminal.
NonTerminalList = LIST OF (Attribute | Terminal | NonTerminal | Option).
NonTerminal = Identifier | Sentence | '(' ChoiceList ')'.
ChoiceList = List | Choice.
TerminalList = LIST OF Terminal.
Terminal = Char | String | CharSet.

SEMANTICS

         Construct= Construct(
            Name= Construct,
            Grammar= Cons(
               Car= Attribute(
                  Name= Name,
                  Grammar= Identifier
                  ),
               Cdr= Cons(
                  Car= '=',
                  Cdr= Cons(
                     Car= Attribute(
                        Name= Grammar,
                        Grammar= NonTerminalList
                        ),
                     Cdr= Nil
                  )
               )
            ).


Parse= Record(
   LeftMargin= 0,
   RightMargin= FileLength,

   Char= ParseChar,
   String= ParseString,
   CharSet= ParseCharSet,

   Category= Grammar,
   Lexem= Construct(
      Separator= ""
      ),
   Construct= ParseList.Grammar(
      Parsed:= Name.Identifier
      ),
   Leaf= ParsedFlag(
      Parsed= Body
      ),
   Attribute= If(
      Value:= Grammar,
      Test= Failed(
         Arg= Value
         ),
      Yes= Fail,
      No= ParsedFlag(
         Parsed^= AddProperty(
            Meaning= Value.Copy,
            Property^= Identifier
            )
         )
      ),
   Choice= Body(
      Cons= If(
         Value:= Car,
         Test= Failed(
            Arg= Car
            ),
         Yes= Cdr,
         No= Value.Copy
         ),
      Nil= Fail
      ),
   Option= If(
      Value:= ParseList.Body,
      Test= Failed(
         Arg= Value
         ),
      Yes= If(
         Test= Equal(
            Arg1= LeftMargin,
            Arg2= RightMargin
            ),
         Yes= ParsedFlag(
            Parsed= AugmentAttributes.Body
            ),
         No= Fail
         ),
      No= ParsedFlag(
         Parsed= Value.Copy
         )
      ),
   List= If(
      Value:= Item,
      Test= Failed(
         Arg= Value
         ),
      Yes= DivideAndConquer(
         Left= Item,
         Right= Cons(
            Car= ListSeparator,
            Cdr= Cons(
               Car= List,
               Cdr= Nil
               )
            )
         ),
      No= Value.Copy
      ),
   ContextList= ParseList.Cons(
      Car= Left,
      Cdr= Cons(
         Car= ParsedFlag(
            Parsed= Body
            ),
         Cdr= Cons(
            Car= Right,
            Cdr= Nil
            )
         )
      ),

   Empty= "",
   AugmentAttributes= Record(
      Cons= Car,
      Nil= Parsed.Copy,

      Char= Cdr,
      String= Cdr,
      CharSet= Cdr,

      Attribute= Cdr(
         Parsed:= Parsed.AddProperty(
            Property^= Identifier,
            Meaning= Empty(
               Empty= Identifier
               )
            )
         ),
      Option= Cdr(
         Parsed:= Body
         ),
      Choice= Cdr,
      List= Cdr,
      Construct= Cdr,
      Category= Cdr,
      Lexem= Cdr
      )
   ).

ParseList= Record(
   Cons= ParsePrefix.Car(
      Rest=Cdr
      ),
   Nil= Parsed.Copy
   ).
ParsePrefix= Case.Record(      
   Char= ParsePrefixChar,
   String= ParsePrefixString,
   CharSet= ParsePrefixCharSet,
   Otherwise= DivideAndConquer
   ).

DivideAndConquer= Recurse(
   Char= ParseChar,
   String= ParseString,
   CharSet= ParseCharSet,
   
   RightStart:= LeftMargin,
   Recurse= If(
      Test= Greater(
         Arg1= RightStart,
         Arg2= RightMargin
         ),
      Yes= Fail,
      No= Postpone(
         RightStart:= FindFirst.Cdr(
            LeftMargin= RightStart
            ),
         Postpone= If(
            Value:= Car(
               RightMargin= RightStart
               ),
            Test= Failed(
               Arg= Value
               ),
            Yes= Recurse(
               RightStart:= 1+RightStart
               ),
            No= If(
               Value:= Cdr(
                  LeftMargin= RightStart,
                  Parsed:= Value.Parsed.Copy
                  ),
               Test= Failed(
                  Arg= Value
                  ),
               Yes= Recurse(
                  RightStart:= 1+RightStart
                  ),
               No= Value.Copy
               )
            )
         )
      )
   ).

FindFirst= Record(
   Char= FindFirstChar,
   String= FindFirstString,
   CharSet= FindFirstCharSet,

   Rest= Nil,
   Nil= TryRest,
   Cons= Recurse,
   TryRest= Rest(
      Cons= Car(
         Rest:= Cdr.Copy,
         Nil= TryRest,
         Cons= Recurse
         ),
      Nil= RightMargin
      ),
   Recurse= Car(
      Rest:= BuildCons(
         Car= Cdr.Copy,
         Cdr= Rest.Copy
         )
      ),

   Construct= Grammar,
   Category= Grammar,
   Lexem= Grammar,
   Attribute= Grammar,
   Option= TryRest(
      RightMargin:= Car
      ),
   Choice= Body(
      Cons= Cdr(
         RightMargin:= Car
         ),
      Nil= RightMargin
      )
   ).
